The '2-matrix_divided' module

using 'matrix_divided'

import module:
	>>>function = __import__('2-matrix_divided').matrix_divided

Test basic matrix:
	>>>matrix_divided([[2, 4, 6], [1, 2, 3]], 2)
	[[1, 2, 3],[0.5, 1, 1.5]]
Test one arg:
	>>>matrix_divided([[1]], 2)
	[[0.5]]
Test unmodefied matrix:
	>>>matrix = [[2, 4, 6], [1, 2, 3]]
	>>>matrix_divided(matrix, 2)
	[[1, 2, 3],[0.5, 1, 1.5]]
	matrix[1][1]
	2
Test devide by negative:
	>>>matrix_divided([[2, 4, 6],[1, 2, 3]], -2)
	[[-1, -2, -3],[-0.5, -1, -1.5]]
Test devide by inf:
	>>>matrix_divided([[2, 4, 6],[1, 2, 3]], float('inf'))
	[[0, 0, 0],[0, 0, 0]]
Test devide by nan:
	>>>matrix_divided([[2, 4, 6],[1, 2, 3]], float('nan'))
	[[nan, nan, nan],[nan, nan, nan]]
Test devide by 0:
	>>>matrix_divided([[2, 4, 6],[1, 2, 3]], 0)
	Traceback(most recent call last)
	...
	ZeroDivisionError: ('division by zero')
Test devide by a string:
	>>>matrix_divided([[2, 4, 6],[1, 2, 3], "nan")
	Traceback (most recent call last)
	...
	TypeError: ('div must be a number')
Test a non int matrix memeber:
	>>>matrix_divided([[2, 4, 6],[1, 'boo', 5], 2)
	Traceback (most recent call last)
	...
	TypeError: ('matrix must be a matrix (list of lists) of integers/floats')
Test empty matrix:
	>>>matrix_divided([], 2)
	Traceback: (most recent call last)
	...
	TypeError: ('matrix must be a matrix (list of lists) of integers/floats')
Test matrix with defrent rows:
	>>>matrix_divided([[2, 4, 6], [1, 2]], 2)
	Traceback (most recent call last)
	...
	TypeError: ('Each row of the matrix must have the same size')
